/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyek_pbo;

import java.awt.geom.RoundRectangle2D;
import javax.swing.table.DefaultTableModel;

import java.awt.Image;
import java.awt.geom.RoundRectangle2D;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.ObjectOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author WIN10
 */
public class MasterHistory extends javax.swing.JFrame {

    /**
     * Creates new form MasterHistory
     */
    int jabatan;
    Object[] rows,rowd;
    DefaultTableModel model,modeld;
    Statement st;
    ResultSet rs;
    ResultSet rs1;
    PreparedStatement pr;
    public MasterHistory(int jabatan) {
        initComponents();
        setShape(new RoundRectangle2D.Double(0, 0, getWidth(), getHeight(), 50, 50));
        this.jabatan = jabatan;
        System.out.println(jabatan);
        
       
        TabelHtrans.setDefaultEditor(Object.class, null);
        rows = new Object[]{"Nomor Nota","Tanggal Nota","Grand Total","Nama Voucher"};
        rowd = new Object[]{"IDBARANG","Nama Barang","Harga Barang","QTY","Sub Total"};
        model = new DefaultTableModel(rows,0);
        modeld = new DefaultTableModel(rowd,0);
        TabelHtrans.setModel(model);
        TabelDtrans.setModel(modeld);
        
        tampilh();
                TabelDtrans.getTableHeader().setReorderingAllowed(false);
                TabelHtrans.getTableHeader().setReorderingAllowed(false);

    }

    private MasterHistory() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPrint = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbFilterStok = new javax.swing.JComboBox<>();
        btnLaporan = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TabelHtrans = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        TabelDtrans = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnPrint.setBackground(new java.awt.Color(187, 187, 187));
        btnPrint.setFont(new java.awt.Font("Franklin Gothic Demi", 1, 12)); // NOI18N
        btnPrint.setForeground(new java.awt.Color(0, 0, 0));
        btnPrint.setText("NOTA");
        btnPrint.setBorder(null);
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        getContentPane().add(btnPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 900, 180, 50));

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Demi", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("History");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 229, -1));

        cbFilterStok.setBackground(new java.awt.Color(204, 204, 204));
        cbFilterStok.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 12)); // NOI18N
        cbFilterStok.setForeground(new java.awt.Color(0, 0, 0));
        cbFilterStok.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "JANUARI", "FEBRUARI", "MARET", "APRIL", "MEI", "JUNI", "JULI", "AGUSTUS", "SEPTEMBER", "OKTOBER", "NOVEMBER", "DESEMBER", "SEMUA" }));
        cbFilterStok.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbFilterStokItemStateChanged(evt);
            }
        });
        getContentPane().add(cbFilterStok, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 80, 240, 30));

        btnLaporan.setBackground(new java.awt.Color(187, 187, 187));
        btnLaporan.setFont(new java.awt.Font("Franklin Gothic Demi", 1, 12)); // NOI18N
        btnLaporan.setForeground(new java.awt.Color(0, 0, 0));
        btnLaporan.setText("LAPORAN PENJUALAN");
        btnLaporan.setBorder(null);
        btnLaporan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaporanActionPerformed(evt);
            }
        });
        getContentPane().add(btnLaporan, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 900, 170, 50));

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Demi", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Details");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 190, -1));

        btnBack.setBackground(new java.awt.Color(24, 90, 102));
        btnBack.setFont(new java.awt.Font("Franklin Gothic Demi", 1, 12)); // NOI18N
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyek_pbo/Back(3).png"))); // NOI18N
        btnBack.setBorder(null);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jButton1.setBackground(new java.awt.Color(24, 90, 102));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyek_pbo/minimize(2).png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 10, 30, 30));

        jButton2.setBackground(new java.awt.Color(24, 90, 102));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyek_pbo/Exit (3).png"))); // NOI18N
        jButton2.setBorder(null);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 10, 30, 30));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyek_pbo/HeaderHistory.png"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1190, 50));

        TabelHtrans.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TabelHtrans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TabelHtransMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(TabelHtrans);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 1120, 380));

        TabelDtrans.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TabelDtrans);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 560, 1120, 310));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyek_pbo/bgHistory.png"))); // NOI18N
        jLabel4.setText("jLabel4");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel4.setDoubleBuffered(true);
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1190, 980));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setExtendedState(MasterHistory.ICONIFIED);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        if (jabatan == 0) {
            formPilihManager f = new formPilihManager(jabatan);
            f.setVisible(true);
            this.dispose();
        }else if (jabatan == 2) {
            formPilihKasir f = new formPilihKasir(jabatan);
            f.setVisible(true);
            this.dispose();
        }else{
            LoginForm f = new LoginForm();
            f.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void TabelHtransMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabelHtransMousePressed
        tampild();
        System.out.println(TabelHtrans.getValueAt(TabelHtrans.getSelectedRow(), 0));
    }//GEN-LAST:event_TabelHtransMousePressed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
        
        int idx = TabelHtrans.getSelectedRow();
        String nota = TabelHtrans.getValueAt(idx, 0).toString();
        String tgl = TabelHtrans.getValueAt(idx, 1).toString();
        int grand = Integer.parseInt(TabelHtrans.getValueAt(idx, 2).toString());
        try {
            FileWriter fw = new FileWriter("nota.txt");
            BufferedWriter w = new BufferedWriter(fw);
            w.write("======================" + nota + "=======================");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 54; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 54; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("| Tanggal Transaksi : " + tgl +"                       |");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 54; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 54; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            int normal = 0;
            for (int i = 0; i < TabelDtrans.getRowCount(); i++) {
                int length = (TabelDtrans.getValueAt(i, 0).toString()+" - " + TabelDtrans.getValueAt(i, 1).toString()).length();
                length = 53-length;
                w.write("| ");
                w.write(TabelDtrans.getValueAt(i, 0).toString()+" - " + TabelDtrans.getValueAt(i, 1).toString());
                for (int j = 0; j < length; j++) {
                    w.write(" ");
                }
                w.write("|");
                w.newLine();
                w.write("| ");
                String script = "Rp. "+TabelDtrans.getValueAt(i, 2) + "   x    " + TabelDtrans.getValueAt(i, 3);
                length = script.length();
                length = 52-length;
                w.write(script);
                script = "Rp. " + TabelDtrans.getValueAt(i, 4);
                length = length - script.length();
                for (int x = 0; x < length; x++) {
                    w.write(" ");
                }
                w.write(script+" |");
                normal = normal + Integer.parseInt(TabelDtrans.getValueAt(i, 4).toString());
                w.newLine();
            }
            w.write("|");
            for (int i = 0; i < 54; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 54; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|------------------------------------------------------|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 54; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 54; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            int potongan = normal - grand;
            if (potongan>0) {
                String script = "Total : Rp. " + normal;
                int length = script.length();
                length = 53-length;
                w.write("|");
                for (int i = 0; i < length; i++) {
                    w.write(" ");
                }
                w.write(script);
                w.write(" |");
                w.newLine();
                script = "Potongan : Rp. " + potongan;
                length = script.length();
                length = 53-length;
                w.write("|");
                for (int i = 0; i < length; i++) {
                    w.write(" ");
                }
                w.write(script);
                w.write(" |");
                w.newLine();
                script = "Harga setelah diskon : Rp. " + grand;
                length = script.length();
                length = 53-length;
                w.write("|");
                for (int i = 0; i < length; i++) {
                    w.write(" ");
                }
                w.write(script);
                w.write(" |");
            }
            else
            {
                String script = "Total : Rp. " + grand;
                int length = script.length();
                length = 53-length;
                w.write("|");
                for (int i = 0; i < length; i++) {
                    w.write(" ");
                }
                w.write(script);
                w.write(" |");
            }
            
            w.newLine();
            w.write("|");
            for (int i = 0; i < 54; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 54; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("=======================" + " THANKYOU " + "=======================");
            /*
            for (int j = 0; j < arrClass.size(); j++) {
                w.write();
                w.newLine();
            }
            */        
            w.close();
            JOptionPane.showMessageDialog(rootPane, "Berhasil Print Nota");
        } catch (Exception ex) {
            //System.out.println("Error karena " + ex.getMessage());
        }      
    }//GEN-LAST:event_btnPrintActionPerformed

    private void cbFilterStokItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbFilterStokItemStateChanged
        // TODO add your handling code here:
        int idx = cbFilterStok.getSelectedIndex()+1;
        String temp = "";
        if (idx<10) {
            temp = "0" + idx;
        }
        else if(idx<13)
        {
            temp = idx+"";
        }
        else
        {
            temp = "";
        }
        try {
            refreshTabelh();
            String sql = "select h.NOMORNOTA,h.TANGGALNOTA,h.GRANDTOTAL,v.NAMAVOUCHER from htrans h, voucher v where h.FK_VOUCHER=v.IDVOUCHER and substr(tanggalnota,4,2) like ?";
            pr = Proyek_PBO.conn.prepareStatement(sql);
            pr.setString(1, "%"+temp+"%");
            rs = pr.executeQuery();
            while (rs.next()) {                
                Object vdata = new Object[]{rs.getString("NOMORNOTA"),rs.getString("TANGGALNOTA"),rs.getInt("GRANDTOTAL"),rs.getString("NAMAVOUCHER")};
                model.addRow((Object[]) vdata);
            }
            
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(MasterStok.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cbFilterStokItemStateChanged

    private void btnLaporanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaporanActionPerformed
        // TODO add your handling code here:
                
        //int idx = TabelHtrans.getSelectedRow();
        //String nota = TabelHtrans.getValueAt(idx, 0).toString();
        //String tgl = TabelHtrans.getValueAt(idx, 1).toString();
        //int grand = Integer.parseInt(TabelHtrans.getValueAt(idx, 2).toString());
        int idx = cbFilterStok.getSelectedIndex();
        idx = idx +1;
        if (idx==13) {
            idx = 0;
        }
        try {
            FileWriter fw = new FileWriter("laporan.txt");
            BufferedWriter w = new BufferedWriter(fw);
            w.write("======================" + "LAPORAN PENJUALAN" + "=======================");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 60; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 60; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            String sc = "";
            int ct = 61;
            if (idx == 0) {
                sc = "| Laporan Penjualan tahunan : ";
            }
            else
            {
                sc = "| Laporan Penjualan Bulan " + cbFilterStok.getItemAt(idx-1).toLowerCase();
            }
            w.write(sc);
            ct = ct - sc.length();
            for (int i = 0; i < ct; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 60; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 60; i++) {
                w.write(" ");
            }
            w.write("|");
            int normal = 0;
            String bln = "";
            if (idx<10) {
                bln ="0" + idx;
            }
            else
            {
                bln = idx+"";
            }
            ArrayList<String> kategori = new ArrayList<>();
            ArrayList<Integer> jumlah = new ArrayList<>();
            for (int i = 0; i < TabelHtrans.getRowCount(); i++) {
                String nota = TabelHtrans.getValueAt(i, 0).toString();
                pr = Proyek_PBO.conn.prepareStatement("select j.namajenis,sum(d.qty) from barang b,dtrans d, jenisbarang j where b.fk_jenis = j.idjenis and d.fk_barang = b.idbarang and d.h_nomornota = '"+nota+"' group by j.namajenis");
                rs = pr.executeQuery();
                while (rs.next()) {   
                    kategori.add(rs.getString(1)); 
                    jumlah.add(rs.getInt(2)); 
                }
                rs.close();    
            } 
           
            for (int i = 0; i < kategori.size(); i++) {
                for (int j = i+1; j < kategori.size(); j++) {
                    if (kategori.get(i).equals(kategori.get(j))) {
                        int total = jumlah.get(i) + jumlah.get(j);
                        jumlah.set(i,total);
                        //JOptionPane.showMessageDialog(rootPane, kategori.get(i) + " - " + jumlah.get(i));
                        //jumlah.remove(j);
                        jumlah.set(j,0);
                        //kategori.remove(j);
                    }
                }
            }
            int barang = 0;
            ArrayList<String> tempKategori = new ArrayList<>();
            ArrayList<Integer> tempJumlah = new ArrayList<>();
            for (int i = 0; i < kategori.size(); i++) {
                if (jumlah.get(i)!=0) {
                    barang = barang + Integer.parseInt(jumlah.get(i).toString());
                    tempKategori.add(kategori.get(i));
                    tempJumlah.add(jumlah.get(i));
                    //JOptionPane.showMessageDialog(rootPane, kategori.get(i) + " - " + jumlah.get(i));
                }
            }
            
            w.newLine();
            String script = "| " + "Terjual " + barang + " pcs";
            int length = 61-script.length();
            w.write(script);
            for (int i = 0; i < length; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 60; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            for (int i = 0; i < tempKategori.size(); i++) {
                if (tempJumlah.get(i)!=0) {
                    script = "| " + tempKategori.get(i) + " Terjual sebanyak " + tempJumlah.get(i).toString() + " pcs";
                    length = 61- script.length();
                    w.write(script);
                    for (int x = 0; x < length; x++) {
                        w.write(" ");
                    }
                    w.write("|");
                     w.newLine();
                }
            }

            w.write("|");
            for (int i = 0; i < 60; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 60; i++) {
                w.write(" ");
            }
            w.write("|");
            int kotor = 0;
            for (int i = 0; i < TabelHtrans.getRowCount(); i++) {
                kotor = kotor + Integer.parseInt(TabelHtrans.getValueAt(i, 2).toString());
            }
            w.newLine();
            script = "| Total Penghasilan Kotor :  Rp. " + kotor;
            length = 61-script.length();
            w.write(script);
            for (int i = 0; i < length; i++) {
                 w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 60; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 60; i++) {
                w.write(" ");
            }
            w.write("|");
            w.newLine();
            w.write("|");
            for (int i = 0; i < 60; i++) {
                w.write("=");
            }
            w.write("|");
            w.close();
            JOptionPane.showMessageDialog(rootPane, "Berhasil Print Laporan");
        } catch (Exception ex) {
            //System.out.println("Error karena " + ex.getMessage());
        } 
    }//GEN-LAST:event_btnLaporanActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MasterHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MasterHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MasterHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MasterHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MasterHistory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabelDtrans;
    private javax.swing.JTable TabelHtrans;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnLaporan;
    private javax.swing.JButton btnPrint;
    private javax.swing.JComboBox<String> cbFilterStok;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables

    private void reset() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void tampilh() {
       try {
            refreshTabelh();
            st = Proyek_PBO.conn.createStatement();
            String sql = "select h.NOMORNOTA,h.TANGGALNOTA,h.GRANDTOTAL,v.NAMAVOUCHER from htrans h, voucher v where h.FK_VOUCHER=v.IDVOUCHER order by substring(h.NOMORNOTA,4,2) DESC,substring(h.NOMORNOTA,6,2) DESC,substring(h.NOMORNOTA,8,3) DESC";
            rs = st.executeQuery(sql);
            while (rs.next()) {                
                Object vdata = new Object[]{rs.getString("NOMORNOTA"),rs.getString("TANGGALNOTA"),rs.getInt("GRANDTOTAL"),rs.getString("NAMAVOUCHER")};
                model.addRow((Object[]) vdata);
            }
            
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(MasterStok.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void refreshTabelh() {
        model = new DefaultTableModel(rows,0);
        TabelHtrans.setModel(model);
    }

    private void tampild() {
          try {
            refreshTabeld();
            st = Proyek_PBO.conn.createStatement();
//            String sql = "select b.NAMABARANG,b.HARGANORMAL,d.QTY,d.SUBTOTAL from dtrans d, barang b where d.H_NOMORNOTA="+TabelHtrans.getValueAt(TabelHtrans.getSelectedRow(), 0)+"and d.FK_BARANG=b.IDBARANG";
            String sql="select b.idbarang,b.NAMABARANG,d.harga,d.QTY,d.SUBTOTAL from dtrans d, barang b where d.H_NOMORNOTA = '"+TabelHtrans.getValueAt(TabelHtrans.getSelectedRow(), 0)+"'and d.FK_BARANG=b.IDBARANG";
            rs1 = st.executeQuery(sql);
//            rs.setString(1,TabelHtrans.getValueAt(0, 1));

            while (rs1.next()) {                
                Object vdata = new Object[]{rs1.getString("IDBARANG"),rs1.getString("NAMABARANG"),rs1.getInt("HARGA"),rs1.getInt("QTY"),rs1.getInt("SUBTOTAL")};
                modeld.addRow((Object[]) vdata);
            }
            
            rs1.close();
        } catch (SQLException ex) {
            Logger.getLogger(MasterStok.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void refreshTabeld() {
        modeld = new DefaultTableModel(rowd,0);
        TabelDtrans.setModel(modeld);
    }
}
